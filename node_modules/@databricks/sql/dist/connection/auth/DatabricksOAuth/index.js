"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const OAuthPersistence_1 = require("./OAuthPersistence");
const OAuthManager_1 = __importDefault(require("./OAuthManager"));
const OAuthScope_1 = require("./OAuthScope");
class DatabricksOAuth {
    constructor(options) {
        this.defaultPersistence = new OAuthPersistence_1.OAuthPersistenceCache();
        this.context = options.context;
        this.options = options;
        this.manager = OAuthManager_1.default.getManager(this.options);
    }
    authenticate() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { host, scopes, headers } = this.options;
            const persistence = (_a = this.options.persistence) !== null && _a !== void 0 ? _a : this.defaultPersistence;
            let token = yield persistence.read(host);
            if (!token) {
                token = yield this.manager.getToken(scopes !== null && scopes !== void 0 ? scopes : OAuthScope_1.defaultOAuthScopes);
            }
            token = yield this.manager.refreshAccessToken(token);
            yield persistence.persist(host, token);
            return Object.assign(Object.assign({}, headers), { Authorization: `Bearer ${token.accessToken}` });
        });
    }
}
exports.default = DatabricksOAuth;
//# sourceMappingURL=index.js.map